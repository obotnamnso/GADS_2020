LAB 2: Google Cloud Fundamentals: Getting Started with GKE
Overview: 
In this lab, you create a Google Kubernetes Engine cluster containing several containers, each containing a web server. You place a load balancer in front of the cluster and view its contents.

Objectives:
In this lab, you learn how to perform the following tasks:
    -Provision a Kubernetes cluster using Kubernetes Engine.
    -Deploy and manage Docker containers using kubectl.

Tasks:
1.Confirm that needed APIs are enabled:
    - In the GCP Console, Navigate through (Navigation menu) and click APIs & Services.
    - Scroll down in the list of enabled APIs, and confirm that both of these APIs are enabled:Kubernetes Engine API and Container Registry API
    - If either API is missing, click Enable APIs and Services at the top. Search for the above APIs by name and enable each for your current project.
2.Start a Kubernetes Engine cluster:
    - Click Continue
    - Place the zone that Qwiklabs assigned you to into an environment variable called MY_ZONE	
	export MY_ZONE=us-central1-a
    - Start a Kubernetes cluster managed by Kubernetes Engine. Name the cluster webfrontend and configure it to run 2 nodes:
	gcloud container clusters create webfrontend --zone $MY_ZONE --num-nodes 2
    - It takes several minutes to create a cluster as Kubernetes Engine provisions virtual machines for you.
    - After the cluster is created, check your installed version of Kubernetes using the kubectl version command:
	kubectl version
    - Result: The gcloud container clusters create command automatically authenticated kubectl for you.
    - View your running nodes in the GCP Console. On the Navigation menu click Compute Engine > VM Instances.
    - Your Kubernetes cluster is now ready for use.
3. Run and deploy a container:
    - From your Cloud Shell prompt, launch a single instance of the nginx container.
	kubectl create deploy nginx --image=nginx:1.17.10
    - This use of the kubectl create command caused Kubernetes to create a deployment consisting of a single pod containing the nginx container.
    - Note: If you see any deprecation warning about future version you can simply ignore it for now and can proceed further.
    - View the pod running the nginx container:
	kubectl get pods
    - Expose the nginx container to the Internet:
	kubectl expose deployment nginx --port 80 --type LoadBalancer
    - Kubernetes created a service and an external load balancer with a public IP address attached to it. The IP address remains the same for the life of the service. Any network traffic to that public IP address is routed to pods behind the service: in this case, the nginx pod.
    - View the new service:
	kubectl get services
    - It may take a few seconds before the External-IP field is populated for your service.
    - Open a new web browser tab and paste your cluster's external IP address into the address bar.
      Result: he default home page of the Nginx browser is displayed.
    - Scale up the number of pods running on your service:
	kubectl scale deployment nginx --replicas 3
    - Scaling up a deployment is useful when you want to increase available resources for an application that is becoming more popular.
    - Confirm that Kubernetes has updated the number of pods:
	kubectl get pods
    - Confirm that your external IP address has not changed:
	kubectl get services
    - Return to the web browser tab in which you viewed your cluster's external IP address. Refresh the page to confirm that the nginx web server is still responding.	
